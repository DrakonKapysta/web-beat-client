/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import type { CreateFileRoute, FileRoutesByPath } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MusicUploadRouteImport } from './routes/music/upload'
import { Route as MusicEditorRouteImport } from './routes/music/editor'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as ProtectedAboutRouteImport } from './routes/_protected/about'

const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MusicUploadRoute = MusicUploadRouteImport.update({
  id: '/music/upload',
  path: '/music/upload',
  getParentRoute: () => rootRouteImport,
} as any)
const MusicEditorRoute = MusicEditorRouteImport.update({
  id: '/music/editor',
  path: '/music/editor',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedAboutRoute = ProtectedAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => ProtectedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/about': typeof ProtectedAboutRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/music/editor': typeof MusicEditorRoute
  '/music/upload': typeof MusicUploadRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/about': typeof ProtectedAboutRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/music/editor': typeof MusicEditorRoute
  '/music/upload': typeof MusicUploadRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/_protected/about': typeof ProtectedAboutRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/music/editor': typeof MusicEditorRoute
  '/music/upload': typeof MusicUploadRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/auth/login'
    | '/auth/register'
    | '/music/editor'
    | '/music/upload'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/about'
    | '/auth/login'
    | '/auth/register'
    | '/music/editor'
    | '/music/upload'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/_protected/about'
    | '/auth/login'
    | '/auth/register'
    | '/music/editor'
    | '/music/upload'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  MusicEditorRoute: typeof MusicEditorRoute
  MusicUploadRoute: typeof MusicUploadRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/about': {
      id: '/_protected/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof ProtectedAboutRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/music/editor': {
      id: '/music/editor'
      path: '/music/editor'
      fullPath: '/music/editor'
      preLoaderRoute: typeof MusicEditorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/music/upload': {
      id: '/music/upload'
      path: '/music/upload'
      fullPath: '/music/upload'
      preLoaderRoute: typeof MusicUploadRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

declare module './routes/index' {
  const createFileRoute: CreateFileRoute<
    '/',
    FileRoutesByPath['/']['parentRoute'],
    FileRoutesByPath['/']['id'],
    FileRoutesByPath['/']['path'],
    FileRoutesByPath['/']['fullPath']
  >
}
declare module './routes/_protected' {
  const createFileRoute: CreateFileRoute<
    '/_protected',
    FileRoutesByPath['/_protected']['parentRoute'],
    FileRoutesByPath['/_protected']['id'],
    FileRoutesByPath['/_protected']['path'],
    FileRoutesByPath['/_protected']['fullPath']
  >
}
declare module './routes/_protected/about' {
  const createFileRoute: CreateFileRoute<
    '/_protected/about',
    FileRoutesByPath['/_protected/about']['parentRoute'],
    FileRoutesByPath['/_protected/about']['id'],
    FileRoutesByPath['/_protected/about']['path'],
    FileRoutesByPath['/_protected/about']['fullPath']
  >
}
declare module './routes/auth/login' {
  const createFileRoute: CreateFileRoute<
    '/auth/login',
    FileRoutesByPath['/auth/login']['parentRoute'],
    FileRoutesByPath['/auth/login']['id'],
    FileRoutesByPath['/auth/login']['path'],
    FileRoutesByPath['/auth/login']['fullPath']
  >
}
declare module './routes/auth/register' {
  const createFileRoute: CreateFileRoute<
    '/auth/register',
    FileRoutesByPath['/auth/register']['parentRoute'],
    FileRoutesByPath['/auth/register']['id'],
    FileRoutesByPath['/auth/register']['path'],
    FileRoutesByPath['/auth/register']['fullPath']
  >
}
declare module './routes/music/editor' {
  const createFileRoute: CreateFileRoute<
    '/music/editor',
    FileRoutesByPath['/music/editor']['parentRoute'],
    FileRoutesByPath['/music/editor']['id'],
    FileRoutesByPath['/music/editor']['path'],
    FileRoutesByPath['/music/editor']['fullPath']
  >
}
declare module './routes/music/upload' {
  const createFileRoute: CreateFileRoute<
    '/music/upload',
    FileRoutesByPath['/music/upload']['parentRoute'],
    FileRoutesByPath['/music/upload']['id'],
    FileRoutesByPath['/music/upload']['path'],
    FileRoutesByPath['/music/upload']['fullPath']
  >
}

interface ProtectedRouteChildren {
  ProtectedAboutRoute: typeof ProtectedAboutRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedAboutRoute: ProtectedAboutRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  MusicEditorRoute: MusicEditorRoute,
  MusicUploadRoute: MusicUploadRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
